
def __init__(self, wt, val, ind):
        self.wt = wt
        self.val = val
        self.ind = ind
        self.cost = val // wt
def __lt__(self, other):
        return self.cost < other.cost
class FractionalKnapSack:
    def getMaxValue(wt, val, capacity):
        iVal = []
        for i in range(len(wt)):
            iVal.append(ItemValue(wt[i], val[i], i))
        iVal.sort(reverse = True)
        totalValue = 0
        for i in iVal:
            curWt = int(i.wt)
            curVal = int(i.val)
            if capacity - curWt >= 0:
                capacity -= curWt
                totalValue += curVal
            else:
                fraction = capacity / curWt
                totalValue += curVal * fraction
                capacity = int(capacity - (curWt * fraction))
                break
        return totalValue
if __name__ == "__main__":
    wt = [18, 15, 10]
    val = [25,24,15]
    capacity = 20
    maxValue = FractionalKnapSack.getMaxValue(wt, val, capacity)
    print("Maximum value in Knapsack =", maxValue)


def knapSack(W , wt , val , n):
    if n == 0 or W == 0 :
        return 0
    if (wt[n-1] > W):
        return knapSack(W , wt , val , n-1)
    else:
        return max(val[n-1] + knapSack(W-wt[n-1] , wt , val , n-1),knapSack(W , wt , val,n-1))
val = [25, 24, 15]
wt = [18, 15, 10]
W = 20
n = len(val)
print (knapSack(W , wt , val , n))

def knapsack(w,Wt,profit,n):
    k = [[0 for x in range (W+1)] for x in range(n+1)]
    for i in range (n+1):
        for W in range (W+1):
            if i==0 or W==0:
                k[i][W]=0
            elif Wt[i-1]<=W:
                k[i][W]=max(profit[i-1]+k[i-1][W-Wt[i-1]],k[i-1][W])               
            else:
                k[i][W]=k[i-1][W]
    return k[n][W]
profit = [12,22,32]
Wt = [10,20,30]
w = 50
n=len(profit)
print( knapsack (W,Wt,profit,n) )

def knapsack(w,wt,profit,n):
    k=[[0 for x in range(w+1)]  for x in range(n+1)]
    for i in range (n+1):
        for w in range (w+1):
            if i==0 or w==0:
                k[i][w]=0
            elif wt[i-1] <= w:
                k[i][w]=max(profit[i-1]+k[i-1][w-wt[i-1]], k[i-1][w])
            else:
                k[i][w]=k[i-1][w]
    return k[n][w]
profit = [60,100,120]
wt = [10,20,30]
w =  50
n = len(profit)
print(knapsack(w,wt,profit,n))





def knapsack(w,wt,profit,n):
    k=[[0 for x in range(w+1)]for x in range (n+1)]
    for i in range (n+1):
        for w in range (w+1):
            if i==0 or w==0:
                k[i][w]=0
            elif wt[i-1] <= w:
                k[i][w]=max(profit[i-1]+k[i-1][w-wt[i-1]],k[i-1][w])
            else:
                k[i][w]=k[i-1][w]
    return k[n][w]
profit=[60,100,120]
wt = [10,20,30]
w=50
n=len(profit)
print(knapsack(w,wt,profit,n))
    
  

def knapsack(w,wt,profit,n):
    k=[[0 for x in range(w+1)]  for x in range(n+1)]
    for i in range (n+1):
        for w in range (w+1):
            if i==0 or w==0:
                k[i][w]=0
            elif wt[i-1] <= w:
                k[i][w]=max(profit[i-1][w]+k[i-1][w-wt[i-1]], k[i-1][w])
            else:
                k[i][w]=k[i-1][w]
    return k[n][w]
profit = [60,100,120]
wt = [10,20,30]
w =  50
n = len(profit)
print(knapsack(w,wt,profit,n))



    

def knapsack(w,wt,profit,n):
    k=[[0 for x in range(w+1)]for x in range (n+1)]
    for i in range (n+1):
        for w in range (w+1):
            if i==0 or w==0:
                k[i][w]=0
            elif wt[i-1] <= w:
                k[i][w]=max(profit[i-1]+k[i-1][w-wt[i-1]],k[i-1][w])
            else:
                k[i][w]=k[i-1][w]
    return k[n][w]
profit=[60,100,120]
wt = [10,20,30]
w=50
n=len(profit)
print(knapsack(w,wt,profit,n))
    




